"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/game/CrashGame.ts":
/*!*******************************!*\
  !*** ./src/game/CrashGame.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CrashGame: () => (/* binding */ CrashGame)\n/* harmony export */ });\nconst simpleHash = (str)=>{\n    let hash = 0;\n    for(let i = 0; i < str.length; i++){\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash // Convert to 32-bit integer\n        ;\n    }\n    return Math.abs(hash).toString(16);\n};\nclass CrashGame {\n    getInitialState() {\n        return {\n            phase: 'waiting',\n            multiplier: 1.00,\n            crashPoint: 1.00,\n            startTime: null,\n            elapsed: 0,\n            hash: '',\n            seed: '',\n            previousGames: []\n        };\n    }\n    // Provably fair crash point generation\n    generateNextCrashPoint() {\n        // For demo purposes - in production this would come from server\n        const serverSeed = Math.random().toString(36).substring(2);\n        const clientSeed = Math.random().toString(36).substring(2);\n        const combinedSeed = \"\".concat(serverSeed, \"-\").concat(clientSeed);\n        const hash = simpleHash(combinedSeed);\n        // Use the first 8 characters of hash for randomness\n        const seedInt = parseInt(hash.slice(0, 8), 16);\n        const max = 0xffffffff // 32-bit max\n        ;\n        // Generate crash point between 1 and 10 for demo\n        const rawPoint = seedInt % 900 / 100 + 1 // 1.00 to 10.00\n        ;\n        const crashPoint = Math.max(1.00, rawPoint * this.HOUSE_EDGE);\n        return {\n            value: crashPoint,\n            hash: hash,\n            seed: combinedSeed\n        };\n    }\n    calculateMultiplier(elapsed) {\n        // Exponential growth function\n        // 1.0696^t where t is seconds elapsed\n        return Math.pow(1.0696, elapsed / 1000);\n    }\n    startGame() {\n        var _this_callbacks_onStarting, _this_callbacks, _this_callbacks_onUpdate, _this_callbacks1;\n        if (this.state.phase !== 'waiting') return;\n        // Start countdown phase\n        this.state.phase = 'starting';\n        (_this_callbacks_onStarting = (_this_callbacks = this.callbacks).onStarting) === null || _this_callbacks_onStarting === void 0 ? void 0 : _this_callbacks_onStarting.call(_this_callbacks);\n        // 3 second countdown\n        setTimeout(()=>{\n            var _this_callbacks_onGameStart, _this_callbacks;\n            this.state.phase = 'in-progress';\n            this.state.startTime = Date.now();\n            this.lastUpdateTime = this.state.startTime;\n            (_this_callbacks_onGameStart = (_this_callbacks = this.callbacks).onGameStart) === null || _this_callbacks_onGameStart === void 0 ? void 0 : _this_callbacks_onGameStart.call(_this_callbacks);\n            this.update();\n        }, 3000);\n        (_this_callbacks_onUpdate = (_this_callbacks1 = this.callbacks).onUpdate) === null || _this_callbacks_onUpdate === void 0 ? void 0 : _this_callbacks_onUpdate.call(_this_callbacks1, this.state);\n    }\n    crash() {\n        var _this_callbacks_onCrash, _this_callbacks;\n        // Stop updates\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = null;\n        }\n        this.state.phase = 'crashed';\n        (_this_callbacks_onCrash = (_this_callbacks = this.callbacks).onCrash) === null || _this_callbacks_onCrash === void 0 ? void 0 : _this_callbacks_onCrash.call(_this_callbacks, this.state.crashPoint);\n        // Store game history\n        this.state.previousGames.unshift({\n            crashPoint: this.state.crashPoint,\n            hash: this.state.hash,\n            seed: this.state.seed\n        });\n        // Keep last 50 games\n        if (this.state.previousGames.length > 50) {\n            this.state.previousGames.pop();\n        }\n        // Generate next crash point\n        const nextCrash = this.generateNextCrashPoint();\n        // Reset for next round after delay\n        setTimeout(()=>{\n            var _this_callbacks_onUpdate, _this_callbacks;\n            this.state = {\n                ...this.getInitialState(),\n                crashPoint: nextCrash.value,\n                hash: nextCrash.hash,\n                seed: nextCrash.seed,\n                previousGames: this.state.previousGames\n            };\n            (_this_callbacks_onUpdate = (_this_callbacks = this.callbacks).onUpdate) === null || _this_callbacks_onUpdate === void 0 ? void 0 : _this_callbacks_onUpdate.call(_this_callbacks, this.state);\n        }, 2000);\n    }\n    verifyGameResult(hash, seed) {\n        const verificationHash = simpleHash(seed);\n        if (verificationHash !== hash) {\n            throw new Error('Invalid game result');\n        }\n        const seedInt = parseInt(hash.slice(0, 8), 16);\n        const max = 0xffffffff;\n        const rawPoint = seedInt % 900 / 100 + 1;\n        return Math.max(1.00, rawPoint * this.HOUSE_EDGE);\n    }\n    getGameStats() {\n        const games = this.state.previousGames;\n        return {\n            totalGames: games.length,\n            averageMultiplier: games.reduce((acc, game)=>acc + game.crashPoint, 0) / games.length,\n            maxMultiplier: Math.max(...games.map((game)=>game.crashPoint)),\n            minMultiplier: Math.min(...games.map((game)=>game.crashPoint)),\n            below2x: games.filter((game)=>game.crashPoint < 2).length,\n            above10x: games.filter((game)=>game.crashPoint > 10).length\n        };\n    }\n    subscribe(callbacks) {\n        this.callbacks = callbacks;\n    }\n    getState() {\n        return {\n            ...this.state\n        };\n    }\n    cleanup() {\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n        }\n    }\n    constructor(){\n        this.HOUSE_EDGE = 0.99 // 1% house edge\n        ;\n        this.GAME_UPDATE_RATE = 60 // Updates per second\n        ;\n        this.updateInterval = null;\n        this.lastUpdateTime = 0;\n        this.callbacks = {};\n        this.update = ()=>{\n            var _this_callbacks_onUpdate, _this_callbacks;\n            if (this.state.phase !== 'in-progress' || !this.state.startTime) return;\n            const now = Date.now();\n            const deltaTime = now - this.lastUpdateTime;\n            this.lastUpdateTime = now;\n            if (deltaTime < 1000 / this.GAME_UPDATE_RATE) return;\n            this.state.elapsed = now - this.state.startTime;\n            this.state.multiplier = this.calculateMultiplier(this.state.elapsed);\n            // Check for crash\n            if (this.state.multiplier >= this.state.crashPoint) {\n                this.crash();\n                return;\n            }\n            (_this_callbacks_onUpdate = (_this_callbacks = this.callbacks).onUpdate) === null || _this_callbacks_onUpdate === void 0 ? void 0 : _this_callbacks_onUpdate.call(_this_callbacks, this.state);\n            requestAnimationFrame(this.update);\n        };\n        this.state = this.getInitialState();\n        this.generateNextCrashPoint();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/game/CrashGame.ts\n"));

/***/ })

});